" vim: set foldmarker={,} foldmethod=marker:

" a handful of basic config options come from vim-sensible

" General {
  set nocompatible " get out of vi-compatibility mode
  set history=9999 " keep plenty of history
  set undodir^=~/.vim/undo
  set undofile
  set spellfile=~/.vim/en.utf-8.add
  set hidden " allow changing buffers without saving
  set wildmode=list:longest,full
  set modelines=5
  "set mouse=a " enable mouse support
" }

" Vim UI {
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  set number " show line numbers
  set splitright "open vertical splits on the right

  " Scrolling
  set scrolloff=3
  set sidescroll=1
  set sidescrolloff=10
" }

" Text Formatting / Layout {
  set ignorecase smartcase infercase " smart case matching
  set tabstop=2 shiftwidth=2 expandtab  " 2 space indents
  if v:version >= 704
    set formatoptions+=cqj
  endif

  set diffopt=filler,vertical

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
" }

" Folding {
  set foldenable " turn on folding
  set foldmethod=marker "fold on markers
  set foldlevel=100 " don't autofold anything
  set foldopen=block,hor,mark,percent,quickfix,tag " what movements open folds

  nnoremap cof :call FoldColumnToggle()<cr>
  function! FoldColumnToggle()
      if &foldcolumn
          setlocal foldcolumn=0
      else
          setlocal foldcolumn=1
      endif
  endfunction
" }

" Colors {
  set background=dark
  try
    packadd solarized
    colorscheme solarized
  catch /^Vim\%((\a\+)\)\=:E185/
    " ignore
  endtry

  syntax on
  set hlsearch
  set colorcolumn=+1 " display column at edge of textwidth

  highlight SignColumn ctermbg=8
  highlight FoldColumn ctermbg=8
  highlight SpellBad ctermfg=1
" }

" Mappings {
  let mapleader = "\<SPACE>"
  let maplocalleader = ","

  " Don't use Ex mode, use Q for formatting
  noremap Q gq

  " Use sane regexes.
  nnoremap / /\v
  vnoremap / /\v

  noremap j gj
  noremap k gk

  " Join lines and restore cursor location (J)
  nnoremap J :call Preserve("join")<CR>

  " Buffer navigation (;;) (;]) (;[) (;ls)
  nnoremap <leader>; <C-^>
  " :map <leader>] :bnext<CR>
  " :map <leader>[ :bprev<CR>
  nnoremap <leader>ls :buffers<CR>

  " strip trailing whitespace
  nnoremap _$ :call Preserve("%s/\\s\\+$//e")<CR>

  inoremap jk <esc>

  nnoremap <silent> <leader>! :redraw!<CR>:redrawstatus!<CR>
  nnoremap <leader>R :so $MYVIMRC<CR>

  nnoremap <silent> <leader>tt :TagbarToggle<CR>

  " tab navigation
  nnoremap <silent> <leader>tn :tabnew<CR>
  nnoremap <silent> <leader>tc :tabclose<CR>
  nnoremap <S-L> :tabnext<CR>
  nnoremap <S-H> :tabprevious<CR>

  nnoremap <silent> <leader>sc :SyntasticCheck<CR>:Errors<CR>
  nnoremap <silent> <leader>st :SyntasticToggleMode<CR>
  " hide sign column
  nnoremap <leader>su :sign unplace *<CR>
  nnoremap <leader>dm :delmarks!<CR>:sign unplace *<CR>

  nnoremap <leader>sh :SignifyToggleHighlight<CR>
  nnoremap <leader>sr :SignifyRefresh<CR>
  nnoremap <leader>st :SignifyToggle<CR>

  nnoremap <leader>u :GundoToggle<CR>

  nnoremap cog :ToggleGoldenViewAutoResize<CR>

  " find current word in quickfix
  nnoremap <leader>fw :execute "vimgrep ".expand("<cword>")." %"<CR>:copen<CR>
  " find last search in quickfix
  nnoremap <leader>ff :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

  " move around split windows with ctrl
  noremap <C-H> <C-W>h
  noremap <C-J> <C-W>j
  noremap <C-K> <C-W>k
  noremap <C-L> <C-W>l

  inoremap <C-L>t <C-R>=system('timestamp -rfc3339')<CR>
  inoremap <C-L>z <C-R>=system('timestamp -rfc3339 -utc')<CR>
  inoremap <C-L>e <C-R>=system('timestamp -epoch')<CR>

  nnoremap <C-T> :FZF<CR>
" }

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

augroup END

" Functions {
  " Convenient command to see the difference between the current buffer and
  " the file it was loaded from, thus the changes you made.
  " Only define it when not defined already.
  if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis
  endif

  function! Preserve(command) "{
    " preparation: save last search, and cursor position.
    let _s=@/
    let view = winsaveview()
    " do the business:
    execute a:command
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call winrestview(view)
  endfunction "}
" }


" Plugins {
  " automatically show diff when running 'git commit'
  autocmd FileType gitcommit DiffGitCached | wincmd p

  source $VIMRUNTIME/macros/matchit.vim

  let g:localvimrc_ask = 0

  let g:statline_fugitive = 1
  let g:statline_filename_relative = 1

  let g:gundo_preview_bottom = 1

  let g:signify_vcs_list = [ 'git', 'hg' ]

  let g:syntastic_go_checkers=['go', 'gofmt', 'golint', 'gotype', 'govet']
  let g:syntastic_mode_map = {
      \ "mode": "active",
      \ "active_filetypes": [],
      \ "passive_filetypes": ["go"],
      \ }

  let g:goldenview__enable_default_mapping = 0

  let g:vimwiki_list = [{
      \ 'path': '~/.wiki/', 'syntax': 'markdown', 'ext': '.md' }]

  if executable("rg")
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
    let g:ackprg = 'ag --nogroup --nocolor --column'
  endif

  let g:fzf_history_dir = '~/.fzf-history'
" }

" Google-specific settings {
  if filereadable($HOME . "/.vim/google.vim")
    source $HOME/.vim/google.vim
  endif
" }
